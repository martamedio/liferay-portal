/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bemis.portal.twofa.device.manager.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.bemis.portal.twofa.device.manager.model.Device;
import com.bemis.portal.twofa.device.manager.model.DeviceModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Device service. Represents a row in the &quot;Bemis_Device&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DeviceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeviceImpl}.
 * </p>
 *
 * @author Prathima Shreenath
 * @see DeviceImpl
 * @see Device
 * @see DeviceModel
 * @generated
 */
@ProviderType
public class DeviceModelImpl extends BaseModelImpl<Device>
	implements DeviceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a device model instance should use the {@link Device} interface instead.
	 */
	public static final String TABLE_NAME = "Bemis_Device";
	public static final Object[][] TABLE_COLUMNS = {
			{ "deviceId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "portalUserId", Types.BIGINT },
			{ "portalUserName", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "deviceIP", Types.VARCHAR },
			{ "browserName", Types.VARCHAR },
			{ "osName", Types.VARCHAR },
			{ "verified", Types.BOOLEAN },
			{ "tempDevice", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("deviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("portalUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("portalUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deviceIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("browserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verified", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("tempDevice", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table Bemis_Device (deviceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,portalUserId LONG,portalUserName VARCHAR(75) null,emailAddress VARCHAR(75) null,deviceIP VARCHAR(75) null,browserName VARCHAR(75) null,osName VARCHAR(75) null,verified BOOLEAN,tempDevice BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Bemis_Device";
	public static final String ORDER_BY_JPQL = " ORDER BY device.deviceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Bemis_Device.deviceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.com.bemis.portal.twofa.device.manager.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bemis.portal.twofa.device.manager.model.Device"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.com.bemis.portal.twofa.device.manager.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bemis.portal.twofa.device.manager.model.Device"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.com.bemis.portal.twofa.device.manager.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bemis.portal.twofa.device.manager.model.Device"),
			true);
	public static final long DEVICEIP_COLUMN_BITMASK = 1L;
	public static final long PORTALUSERID_COLUMN_BITMASK = 2L;
	public static final long TEMPDEVICE_COLUMN_BITMASK = 4L;
	public static final long VERIFIED_COLUMN_BITMASK = 8L;
	public static final long DEVICEID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.com.bemis.portal.twofa.device.manager.service.util.ServiceProps.get(
				"lock.expiration.time.com.bemis.portal.twofa.device.manager.model.Device"));

	public DeviceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _deviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDeviceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Device.class;
	}

	@Override
	public String getModelClassName() {
		return Device.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("deviceId", getDeviceId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("portalUserId", getPortalUserId());
		attributes.put("portalUserName", getPortalUserName());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("deviceIP", getDeviceIP());
		attributes.put("browserName", getBrowserName());
		attributes.put("osName", getOsName());
		attributes.put("verified", isVerified());
		attributes.put("tempDevice", isTempDevice());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long deviceId = (Long)attributes.get("deviceId");

		if (deviceId != null) {
			setDeviceId(deviceId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long portalUserId = (Long)attributes.get("portalUserId");

		if (portalUserId != null) {
			setPortalUserId(portalUserId);
		}

		String portalUserName = (String)attributes.get("portalUserName");

		if (portalUserName != null) {
			setPortalUserName(portalUserName);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String deviceIP = (String)attributes.get("deviceIP");

		if (deviceIP != null) {
			setDeviceIP(deviceIP);
		}

		String browserName = (String)attributes.get("browserName");

		if (browserName != null) {
			setBrowserName(browserName);
		}

		String osName = (String)attributes.get("osName");

		if (osName != null) {
			setOsName(osName);
		}

		Boolean verified = (Boolean)attributes.get("verified");

		if (verified != null) {
			setVerified(verified);
		}

		Boolean tempDevice = (Boolean)attributes.get("tempDevice");

		if (tempDevice != null) {
			setTempDevice(tempDevice);
		}
	}

	@Override
	public long getDeviceId() {
		return _deviceId;
	}

	@Override
	public void setDeviceId(long deviceId) {
		_deviceId = deviceId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getPortalUserId() {
		return _portalUserId;
	}

	@Override
	public void setPortalUserId(long portalUserId) {
		_columnBitmask |= PORTALUSERID_COLUMN_BITMASK;

		if (!_setOriginalPortalUserId) {
			_setOriginalPortalUserId = true;

			_originalPortalUserId = _portalUserId;
		}

		_portalUserId = portalUserId;
	}

	@Override
	public String getPortalUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getPortalUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setPortalUserUuid(String portalUserUuid) {
	}

	public long getOriginalPortalUserId() {
		return _originalPortalUserId;
	}

	@Override
	public String getPortalUserName() {
		if (_portalUserName == null) {
			return "";
		}
		else {
			return _portalUserName;
		}
	}

	@Override
	public void setPortalUserName(String portalUserName) {
		_portalUserName = portalUserName;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@Override
	public String getDeviceIP() {
		if (_deviceIP == null) {
			return "";
		}
		else {
			return _deviceIP;
		}
	}

	@Override
	public void setDeviceIP(String deviceIP) {
		_columnBitmask |= DEVICEIP_COLUMN_BITMASK;

		if (_originalDeviceIP == null) {
			_originalDeviceIP = _deviceIP;
		}

		_deviceIP = deviceIP;
	}

	public String getOriginalDeviceIP() {
		return GetterUtil.getString(_originalDeviceIP);
	}

	@Override
	public String getBrowserName() {
		if (_browserName == null) {
			return "";
		}
		else {
			return _browserName;
		}
	}

	@Override
	public void setBrowserName(String browserName) {
		_browserName = browserName;
	}

	@Override
	public String getOsName() {
		if (_osName == null) {
			return "";
		}
		else {
			return _osName;
		}
	}

	@Override
	public void setOsName(String osName) {
		_osName = osName;
	}

	@Override
	public boolean getVerified() {
		return _verified;
	}

	@Override
	public boolean isVerified() {
		return _verified;
	}

	@Override
	public void setVerified(boolean verified) {
		_columnBitmask |= VERIFIED_COLUMN_BITMASK;

		if (!_setOriginalVerified) {
			_setOriginalVerified = true;

			_originalVerified = _verified;
		}

		_verified = verified;
	}

	public boolean getOriginalVerified() {
		return _originalVerified;
	}

	@Override
	public boolean getTempDevice() {
		return _tempDevice;
	}

	@Override
	public boolean isTempDevice() {
		return _tempDevice;
	}

	@Override
	public void setTempDevice(boolean tempDevice) {
		_columnBitmask |= TEMPDEVICE_COLUMN_BITMASK;

		if (!_setOriginalTempDevice) {
			_setOriginalTempDevice = true;

			_originalTempDevice = _tempDevice;
		}

		_tempDevice = tempDevice;
	}

	public boolean getOriginalTempDevice() {
		return _originalTempDevice;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Device.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Device toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Device)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeviceImpl deviceImpl = new DeviceImpl();

		deviceImpl.setDeviceId(getDeviceId());
		deviceImpl.setGroupId(getGroupId());
		deviceImpl.setCompanyId(getCompanyId());
		deviceImpl.setUserId(getUserId());
		deviceImpl.setUserName(getUserName());
		deviceImpl.setCreateDate(getCreateDate());
		deviceImpl.setModifiedDate(getModifiedDate());
		deviceImpl.setPortalUserId(getPortalUserId());
		deviceImpl.setPortalUserName(getPortalUserName());
		deviceImpl.setEmailAddress(getEmailAddress());
		deviceImpl.setDeviceIP(getDeviceIP());
		deviceImpl.setBrowserName(getBrowserName());
		deviceImpl.setOsName(getOsName());
		deviceImpl.setVerified(isVerified());
		deviceImpl.setTempDevice(isTempDevice());

		deviceImpl.resetOriginalValues();

		return deviceImpl;
	}

	@Override
	public int compareTo(Device device) {
		long primaryKey = device.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Device)) {
			return false;
		}

		Device device = (Device)obj;

		long primaryKey = device.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DeviceModelImpl deviceModelImpl = this;

		deviceModelImpl._setModifiedDate = false;

		deviceModelImpl._originalPortalUserId = deviceModelImpl._portalUserId;

		deviceModelImpl._setOriginalPortalUserId = false;

		deviceModelImpl._originalDeviceIP = deviceModelImpl._deviceIP;

		deviceModelImpl._originalVerified = deviceModelImpl._verified;

		deviceModelImpl._setOriginalVerified = false;

		deviceModelImpl._originalTempDevice = deviceModelImpl._tempDevice;

		deviceModelImpl._setOriginalTempDevice = false;

		deviceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Device> toCacheModel() {
		DeviceCacheModel deviceCacheModel = new DeviceCacheModel();

		deviceCacheModel.deviceId = getDeviceId();

		deviceCacheModel.groupId = getGroupId();

		deviceCacheModel.companyId = getCompanyId();

		deviceCacheModel.userId = getUserId();

		deviceCacheModel.userName = getUserName();

		String userName = deviceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			deviceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			deviceCacheModel.createDate = createDate.getTime();
		}
		else {
			deviceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			deviceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			deviceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		deviceCacheModel.portalUserId = getPortalUserId();

		deviceCacheModel.portalUserName = getPortalUserName();

		String portalUserName = deviceCacheModel.portalUserName;

		if ((portalUserName != null) && (portalUserName.length() == 0)) {
			deviceCacheModel.portalUserName = null;
		}

		deviceCacheModel.emailAddress = getEmailAddress();

		String emailAddress = deviceCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			deviceCacheModel.emailAddress = null;
		}

		deviceCacheModel.deviceIP = getDeviceIP();

		String deviceIP = deviceCacheModel.deviceIP;

		if ((deviceIP != null) && (deviceIP.length() == 0)) {
			deviceCacheModel.deviceIP = null;
		}

		deviceCacheModel.browserName = getBrowserName();

		String browserName = deviceCacheModel.browserName;

		if ((browserName != null) && (browserName.length() == 0)) {
			deviceCacheModel.browserName = null;
		}

		deviceCacheModel.osName = getOsName();

		String osName = deviceCacheModel.osName;

		if ((osName != null) && (osName.length() == 0)) {
			deviceCacheModel.osName = null;
		}

		deviceCacheModel.verified = isVerified();

		deviceCacheModel.tempDevice = isTempDevice();

		return deviceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{deviceId=");
		sb.append(getDeviceId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", portalUserId=");
		sb.append(getPortalUserId());
		sb.append(", portalUserName=");
		sb.append(getPortalUserName());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", deviceIP=");
		sb.append(getDeviceIP());
		sb.append(", browserName=");
		sb.append(getBrowserName());
		sb.append(", osName=");
		sb.append(getOsName());
		sb.append(", verified=");
		sb.append(isVerified());
		sb.append(", tempDevice=");
		sb.append(isTempDevice());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.bemis.portal.twofa.device.manager.model.Device");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>deviceId</column-name><column-value><![CDATA[");
		sb.append(getDeviceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portalUserId</column-name><column-value><![CDATA[");
		sb.append(getPortalUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portalUserName</column-name><column-value><![CDATA[");
		sb.append(getPortalUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceIP</column-name><column-value><![CDATA[");
		sb.append(getDeviceIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>browserName</column-name><column-value><![CDATA[");
		sb.append(getBrowserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>osName</column-name><column-value><![CDATA[");
		sb.append(getOsName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verified</column-name><column-value><![CDATA[");
		sb.append(isVerified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tempDevice</column-name><column-value><![CDATA[");
		sb.append(isTempDevice());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Device.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Device.class, ModelWrapper.class
		};
	private long _deviceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _portalUserId;
	private long _originalPortalUserId;
	private boolean _setOriginalPortalUserId;
	private String _portalUserName;
	private String _emailAddress;
	private String _deviceIP;
	private String _originalDeviceIP;
	private String _browserName;
	private String _osName;
	private boolean _verified;
	private boolean _originalVerified;
	private boolean _setOriginalVerified;
	private boolean _tempDevice;
	private boolean _originalTempDevice;
	private boolean _setOriginalTempDevice;
	private long _columnBitmask;
	private Device _escapedModel;
}