/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.multi.factor.authentication.otp.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

/**
 * The base model interface for the HOTP service. Represents a row in the &quot;HOTP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.multi.factor.authentication.otp.model.impl.HOTPModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.multi.factor.authentication.otp.model.impl.HOTPImpl}.
 * </p>
 *
 * @author arthurchan35
 * @see HOTP
 * @see com.liferay.multi.factor.authentication.otp.model.impl.HOTPImpl
 * @see com.liferay.multi.factor.authentication.otp.model.impl.HOTPModelImpl
 * @generated
 */
@ProviderType
public interface HOTPModel extends BaseModel<HOTP> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a hotp model instance should use the {@link HOTP} interface instead.
	 */

	/**
	 * Returns the primary key of this hotp.
	 *
	 * @return the primary key of this hotp
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this hotp.
	 *
	 * @param primaryKey the primary key of this hotp
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the hotp ID of this hotp.
	 *
	 * @return the hotp ID of this hotp
	 */
	public long getHotpId();

	/**
	 * Sets the hotp ID of this hotp.
	 *
	 * @param hotpId the hotp ID of this hotp
	 */
	public void setHotpId(long hotpId);

	/**
	 * Returns the user ID of this hotp.
	 *
	 * @return the user ID of this hotp
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this hotp.
	 *
	 * @param userId the user ID of this hotp
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this hotp.
	 *
	 * @return the user uuid of this hotp
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this hotp.
	 *
	 * @param userUuid the user uuid of this hotp
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the count of this hotp.
	 *
	 * @return the count of this hotp
	 */
	public long getCount();

	/**
	 * Sets the count of this hotp.
	 *
	 * @param count the count of this hotp
	 */
	public void setCount(long count);

	/**
	 * Returns the failed attempts of this hotp.
	 *
	 * @return the failed attempts of this hotp
	 */
	public int getFailedAttempts();

	/**
	 * Sets the failed attempts of this hotp.
	 *
	 * @param failedAttempts the failed attempts of this hotp
	 */
	public void setFailedAttempts(int failedAttempts);

	/**
	 * Returns the shared secret of this hotp.
	 *
	 * @return the shared secret of this hotp
	 */
	@AutoEscape
	public String getSharedSecret();

	/**
	 * Sets the shared secret of this hotp.
	 *
	 * @param sharedSecret the shared secret of this hotp
	 */
	public void setSharedSecret(String sharedSecret);

	/**
	 * Returns the verified of this hotp.
	 *
	 * @return the verified of this hotp
	 */
	public boolean getVerified();

	/**
	 * Returns <code>true</code> if this hotp is verified.
	 *
	 * @return <code>true</code> if this hotp is verified; <code>false</code> otherwise
	 */
	public boolean isVerified();

	/**
	 * Sets whether this hotp is verified.
	 *
	 * @param verified the verified of this hotp
	 */
	public void setVerified(boolean verified);
}