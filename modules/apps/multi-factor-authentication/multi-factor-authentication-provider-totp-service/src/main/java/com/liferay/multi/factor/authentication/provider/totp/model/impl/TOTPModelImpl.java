/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.multi.factor.authentication.provider.totp.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.multi.factor.authentication.provider.totp.model.TOTP;
import com.liferay.multi.factor.authentication.provider.totp.model.TOTPModel;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TOTP service. Represents a row in the &quot;TOTP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TOTPModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TOTPImpl}.
 * </p>
 *
 * @author arthurchan35
 * @see TOTPImpl
 * @see TOTP
 * @see TOTPModel
 * @generated
 */
@ProviderType
public class TOTPModelImpl extends BaseModelImpl<TOTP> implements TOTPModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a totp model instance should use the {@link TOTP} interface instead.
	 */
	public static final String TABLE_NAME = "TOTP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "totpId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "backupCodes", Types.VARCHAR },
			{ "lastLoginDate", Types.TIMESTAMP },
			{ "lastLoginIP", Types.VARCHAR },
			{ "lastFailedLoginDate", Types.TIMESTAMP },
			{ "failedLoginAttempts", Types.INTEGER },
			{ "sharedSecret", Types.VARCHAR },
			{ "verified", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("totpId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("backupCodes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastLoginDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastLoginIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastFailedLoginDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("failedLoginAttempts", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sharedSecret", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verified", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table TOTP (totpId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,backupCodes VARCHAR(255) null,lastLoginDate DATE null,lastLoginIP VARCHAR(75) null,lastFailedLoginDate DATE null,failedLoginAttempts INTEGER,sharedSecret VARCHAR(255) null,verified BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table TOTP";
	public static final String ORDER_BY_JPQL = " ORDER BY totp.totpId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TOTP.totpId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.multi.factor.authentication.provider.totp.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.multi.factor.authentication.provider.totp.model.TOTP"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.multi.factor.authentication.provider.totp.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.multi.factor.authentication.provider.totp.model.TOTP"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.multi.factor.authentication.provider.totp.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.multi.factor.authentication.provider.totp.model.TOTP"),
			true);
	public static final long USERID_COLUMN_BITMASK = 1L;
	public static final long TOTPID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.multi.factor.authentication.provider.totp.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.multi.factor.authentication.provider.totp.model.TOTP"));

	public TOTPModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _totpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTotpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _totpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TOTP.class;
	}

	@Override
	public String getModelClassName() {
		return TOTP.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("totpId", getTotpId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("backupCodes", getBackupCodes());
		attributes.put("lastLoginDate", getLastLoginDate());
		attributes.put("lastLoginIP", getLastLoginIP());
		attributes.put("lastFailedLoginDate", getLastFailedLoginDate());
		attributes.put("failedLoginAttempts", getFailedLoginAttempts());
		attributes.put("sharedSecret", getSharedSecret());
		attributes.put("verified", isVerified());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long totpId = (Long)attributes.get("totpId");

		if (totpId != null) {
			setTotpId(totpId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String backupCodes = (String)attributes.get("backupCodes");

		if (backupCodes != null) {
			setBackupCodes(backupCodes);
		}

		Date lastLoginDate = (Date)attributes.get("lastLoginDate");

		if (lastLoginDate != null) {
			setLastLoginDate(lastLoginDate);
		}

		String lastLoginIP = (String)attributes.get("lastLoginIP");

		if (lastLoginIP != null) {
			setLastLoginIP(lastLoginIP);
		}

		Date lastFailedLoginDate = (Date)attributes.get("lastFailedLoginDate");

		if (lastFailedLoginDate != null) {
			setLastFailedLoginDate(lastFailedLoginDate);
		}

		Integer failedLoginAttempts = (Integer)attributes.get(
				"failedLoginAttempts");

		if (failedLoginAttempts != null) {
			setFailedLoginAttempts(failedLoginAttempts);
		}

		String sharedSecret = (String)attributes.get("sharedSecret");

		if (sharedSecret != null) {
			setSharedSecret(sharedSecret);
		}

		Boolean verified = (Boolean)attributes.get("verified");

		if (verified != null) {
			setVerified(verified);
		}
	}

	@Override
	public long getTotpId() {
		return _totpId;
	}

	@Override
	public void setTotpId(long totpId) {
		_totpId = totpId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getBackupCodes() {
		if (_backupCodes == null) {
			return "";
		}
		else {
			return _backupCodes;
		}
	}

	@Override
	public void setBackupCodes(String backupCodes) {
		_backupCodes = backupCodes;
	}

	@Override
	public Date getLastLoginDate() {
		return _lastLoginDate;
	}

	@Override
	public void setLastLoginDate(Date lastLoginDate) {
		_lastLoginDate = lastLoginDate;
	}

	@Override
	public String getLastLoginIP() {
		if (_lastLoginIP == null) {
			return "";
		}
		else {
			return _lastLoginIP;
		}
	}

	@Override
	public void setLastLoginIP(String lastLoginIP) {
		_lastLoginIP = lastLoginIP;
	}

	@Override
	public Date getLastFailedLoginDate() {
		return _lastFailedLoginDate;
	}

	@Override
	public void setLastFailedLoginDate(Date lastFailedLoginDate) {
		_lastFailedLoginDate = lastFailedLoginDate;
	}

	@Override
	public int getFailedLoginAttempts() {
		return _failedLoginAttempts;
	}

	@Override
	public void setFailedLoginAttempts(int failedLoginAttempts) {
		_failedLoginAttempts = failedLoginAttempts;
	}

	@Override
	public String getSharedSecret() {
		if (_sharedSecret == null) {
			return "";
		}
		else {
			return _sharedSecret;
		}
	}

	@Override
	public void setSharedSecret(String sharedSecret) {
		_sharedSecret = sharedSecret;
	}

	@Override
	public boolean getVerified() {
		return _verified;
	}

	@Override
	public boolean isVerified() {
		return _verified;
	}

	@Override
	public void setVerified(boolean verified) {
		_verified = verified;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TOTP.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TOTP toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TOTP)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TOTPImpl totpImpl = new TOTPImpl();

		totpImpl.setTotpId(getTotpId());
		totpImpl.setCompanyId(getCompanyId());
		totpImpl.setUserId(getUserId());
		totpImpl.setUserName(getUserName());
		totpImpl.setCreateDate(getCreateDate());
		totpImpl.setModifiedDate(getModifiedDate());
		totpImpl.setBackupCodes(getBackupCodes());
		totpImpl.setLastLoginDate(getLastLoginDate());
		totpImpl.setLastLoginIP(getLastLoginIP());
		totpImpl.setLastFailedLoginDate(getLastFailedLoginDate());
		totpImpl.setFailedLoginAttempts(getFailedLoginAttempts());
		totpImpl.setSharedSecret(getSharedSecret());
		totpImpl.setVerified(isVerified());

		totpImpl.resetOriginalValues();

		return totpImpl;
	}

	@Override
	public int compareTo(TOTP totp) {
		long primaryKey = totp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TOTP)) {
			return false;
		}

		TOTP totp = (TOTP)obj;

		long primaryKey = totp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TOTPModelImpl totpModelImpl = this;

		totpModelImpl._originalUserId = totpModelImpl._userId;

		totpModelImpl._setOriginalUserId = false;

		totpModelImpl._setModifiedDate = false;

		totpModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TOTP> toCacheModel() {
		TOTPCacheModel totpCacheModel = new TOTPCacheModel();

		totpCacheModel.totpId = getTotpId();

		totpCacheModel.companyId = getCompanyId();

		totpCacheModel.userId = getUserId();

		totpCacheModel.userName = getUserName();

		String userName = totpCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			totpCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			totpCacheModel.createDate = createDate.getTime();
		}
		else {
			totpCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			totpCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			totpCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		totpCacheModel.backupCodes = getBackupCodes();

		String backupCodes = totpCacheModel.backupCodes;

		if ((backupCodes != null) && (backupCodes.length() == 0)) {
			totpCacheModel.backupCodes = null;
		}

		Date lastLoginDate = getLastLoginDate();

		if (lastLoginDate != null) {
			totpCacheModel.lastLoginDate = lastLoginDate.getTime();
		}
		else {
			totpCacheModel.lastLoginDate = Long.MIN_VALUE;
		}

		totpCacheModel.lastLoginIP = getLastLoginIP();

		String lastLoginIP = totpCacheModel.lastLoginIP;

		if ((lastLoginIP != null) && (lastLoginIP.length() == 0)) {
			totpCacheModel.lastLoginIP = null;
		}

		Date lastFailedLoginDate = getLastFailedLoginDate();

		if (lastFailedLoginDate != null) {
			totpCacheModel.lastFailedLoginDate = lastFailedLoginDate.getTime();
		}
		else {
			totpCacheModel.lastFailedLoginDate = Long.MIN_VALUE;
		}

		totpCacheModel.failedLoginAttempts = getFailedLoginAttempts();

		totpCacheModel.sharedSecret = getSharedSecret();

		String sharedSecret = totpCacheModel.sharedSecret;

		if ((sharedSecret != null) && (sharedSecret.length() == 0)) {
			totpCacheModel.sharedSecret = null;
		}

		totpCacheModel.verified = isVerified();

		return totpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{totpId=");
		sb.append(getTotpId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", backupCodes=");
		sb.append(getBackupCodes());
		sb.append(", lastLoginDate=");
		sb.append(getLastLoginDate());
		sb.append(", lastLoginIP=");
		sb.append(getLastLoginIP());
		sb.append(", lastFailedLoginDate=");
		sb.append(getLastFailedLoginDate());
		sb.append(", failedLoginAttempts=");
		sb.append(getFailedLoginAttempts());
		sb.append(", sharedSecret=");
		sb.append(getSharedSecret());
		sb.append(", verified=");
		sb.append(isVerified());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.multi.factor.authentication.provider.totp.model.TOTP");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>totpId</column-name><column-value><![CDATA[");
		sb.append(getTotpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>backupCodes</column-name><column-value><![CDATA[");
		sb.append(getBackupCodes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLoginDate</column-name><column-value><![CDATA[");
		sb.append(getLastLoginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLoginIP</column-name><column-value><![CDATA[");
		sb.append(getLastLoginIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastFailedLoginDate</column-name><column-value><![CDATA[");
		sb.append(getLastFailedLoginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failedLoginAttempts</column-name><column-value><![CDATA[");
		sb.append(getFailedLoginAttempts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedSecret</column-name><column-value><![CDATA[");
		sb.append(getSharedSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verified</column-name><column-value><![CDATA[");
		sb.append(isVerified());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TOTP.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TOTP.class, ModelWrapper.class
		};
	private long _totpId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _backupCodes;
	private Date _lastLoginDate;
	private String _lastLoginIP;
	private Date _lastFailedLoginDate;
	private int _failedLoginAttempts;
	private String _sharedSecret;
	private boolean _verified;
	private long _columnBitmask;
	private TOTP _escapedModel;
}