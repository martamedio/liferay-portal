/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.multi.factor.authentication.otp.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.multi.factor.authentication.otp.model.HOTP;
import com.liferay.multi.factor.authentication.otp.service.HOTPLocalService;
import com.liferay.multi.factor.authentication.otp.service.persistence.HOTPPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the hotp local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.multi.factor.authentication.otp.service.impl.HOTPLocalServiceImpl}.
 * </p>
 *
 * @author arthurchan35
 * @see com.liferay.multi.factor.authentication.otp.service.impl.HOTPLocalServiceImpl
 * @see com.liferay.multi.factor.authentication.otp.service.HOTPLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class HOTPLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements HOTPLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.multi.factor.authentication.otp.service.HOTPLocalServiceUtil} to access the hotp local service.
	 */

	/**
	 * Adds the hotp to the database. Also notifies the appropriate model listeners.
	 *
	 * @param hotp the hotp
	 * @return the hotp that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public HOTP addHOTP(HOTP hotp) {
		hotp.setNew(true);

		return hotpPersistence.update(hotp);
	}

	/**
	 * Creates a new hotp with the primary key. Does not add the hotp to the database.
	 *
	 * @param hotpId the primary key for the new hotp
	 * @return the new hotp
	 */
	@Override
	@Transactional(enabled = false)
	public HOTP createHOTP(long hotpId) {
		return hotpPersistence.create(hotpId);
	}

	/**
	 * Deletes the hotp with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param hotpId the primary key of the hotp
	 * @return the hotp that was removed
	 * @throws PortalException if a hotp with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public HOTP deleteHOTP(long hotpId) throws PortalException {
		return hotpPersistence.remove(hotpId);
	}

	/**
	 * Deletes the hotp from the database. Also notifies the appropriate model listeners.
	 *
	 * @param hotp the hotp
	 * @return the hotp that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public HOTP deleteHOTP(HOTP hotp) {
		return hotpPersistence.remove(hotp);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(HOTP.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return hotpPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.multi.factor.authentication.otp.model.impl.HOTPModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return hotpPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.multi.factor.authentication.otp.model.impl.HOTPModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return hotpPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return hotpPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return hotpPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public HOTP fetchHOTP(long hotpId) {
		return hotpPersistence.fetchByPrimaryKey(hotpId);
	}

	/**
	 * Returns the hotp with the primary key.
	 *
	 * @param hotpId the primary key of the hotp
	 * @return the hotp
	 * @throws PortalException if a hotp with the primary key could not be found
	 */
	@Override
	public HOTP getHOTP(long hotpId) throws PortalException {
		return hotpPersistence.findByPrimaryKey(hotpId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(hotpLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(HOTP.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("hotpId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(hotpLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(HOTP.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("hotpId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(hotpLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(HOTP.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("hotpId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return hotpLocalService.deleteHOTP((HOTP)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return hotpPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the hotps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.multi.factor.authentication.otp.model.impl.HOTPModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of hotps
	 * @param end the upper bound of the range of hotps (not inclusive)
	 * @return the range of hotps
	 */
	@Override
	public List<HOTP> getHOTPs(int start, int end) {
		return hotpPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of hotps.
	 *
	 * @return the number of hotps
	 */
	@Override
	public int getHOTPsCount() {
		return hotpPersistence.countAll();
	}

	/**
	 * Updates the hotp in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param hotp the hotp
	 * @return the hotp that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public HOTP updateHOTP(HOTP hotp) {
		return hotpPersistence.update(hotp);
	}

	/**
	 * Returns the hotp local service.
	 *
	 * @return the hotp local service
	 */
	public HOTPLocalService getHOTPLocalService() {
		return hotpLocalService;
	}

	/**
	 * Sets the hotp local service.
	 *
	 * @param hotpLocalService the hotp local service
	 */
	public void setHOTPLocalService(HOTPLocalService hotpLocalService) {
		this.hotpLocalService = hotpLocalService;
	}

	/**
	 * Returns the hotp persistence.
	 *
	 * @return the hotp persistence
	 */
	public HOTPPersistence getHOTPPersistence() {
		return hotpPersistence;
	}

	/**
	 * Sets the hotp persistence.
	 *
	 * @param hotpPersistence the hotp persistence
	 */
	public void setHOTPPersistence(HOTPPersistence hotpPersistence) {
		this.hotpPersistence = hotpPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.multi.factor.authentication.otp.model.HOTP",
			hotpLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.multi.factor.authentication.otp.model.HOTP");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return HOTPLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return HOTP.class;
	}

	protected String getModelClassName() {
		return HOTP.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = hotpPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = HOTPLocalService.class)
	protected HOTPLocalService hotpLocalService;
	@BeanReference(type = HOTPPersistence.class)
	protected HOTPPersistence hotpPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}