/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.multi.factor.authentication.otp.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.multi.factor.authentication.otp.model.TOTP;
import com.liferay.multi.factor.authentication.otp.model.TOTPModel;
import com.liferay.multi.factor.authentication.otp.model.TOTPSoap;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TOTP service. Represents a row in the &quot;TOTP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TOTPModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TOTPImpl}.
 * </p>
 *
 * @author arthurchan35
 * @see TOTPImpl
 * @see TOTP
 * @see TOTPModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TOTPModelImpl extends BaseModelImpl<TOTP> implements TOTPModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a totp model instance should use the {@link TOTP} interface instead.
	 */
	public static final String TABLE_NAME = "TOTP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "totpId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "failedAttempts", Types.INTEGER },
			{ "sharedSecret", Types.VARCHAR },
			{ "verified", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("totpId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("failedAttempts", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sharedSecret", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verified", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table TOTP (totpId LONG not null primary key,userId LONG,failedAttempts INTEGER,sharedSecret VARCHAR(75) null,verified BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table TOTP";
	public static final String ORDER_BY_JPQL = " ORDER BY totp.totpId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TOTP.totpId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.multi.factor.authentication.otp.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.multi.factor.authentication.otp.model.TOTP"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.multi.factor.authentication.otp.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.multi.factor.authentication.otp.model.TOTP"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.multi.factor.authentication.otp.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.multi.factor.authentication.otp.model.TOTP"),
			true);
	public static final long USERID_COLUMN_BITMASK = 1L;
	public static final long TOTPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TOTP toModel(TOTPSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TOTP model = new TOTPImpl();

		model.setTotpId(soapModel.getTotpId());
		model.setUserId(soapModel.getUserId());
		model.setFailedAttempts(soapModel.getFailedAttempts());
		model.setSharedSecret(soapModel.getSharedSecret());
		model.setVerified(soapModel.isVerified());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TOTP> toModels(TOTPSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TOTP> models = new ArrayList<TOTP>(soapModels.length);

		for (TOTPSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.multi.factor.authentication.otp.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.multi.factor.authentication.otp.model.TOTP"));

	public TOTPModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _totpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTotpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _totpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TOTP.class;
	}

	@Override
	public String getModelClassName() {
		return TOTP.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("totpId", getTotpId());
		attributes.put("userId", getUserId());
		attributes.put("failedAttempts", getFailedAttempts());
		attributes.put("sharedSecret", getSharedSecret());
		attributes.put("verified", isVerified());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long totpId = (Long)attributes.get("totpId");

		if (totpId != null) {
			setTotpId(totpId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer failedAttempts = (Integer)attributes.get("failedAttempts");

		if (failedAttempts != null) {
			setFailedAttempts(failedAttempts);
		}

		String sharedSecret = (String)attributes.get("sharedSecret");

		if (sharedSecret != null) {
			setSharedSecret(sharedSecret);
		}

		Boolean verified = (Boolean)attributes.get("verified");

		if (verified != null) {
			setVerified(verified);
		}
	}

	@JSON
	@Override
	public long getTotpId() {
		return _totpId;
	}

	@Override
	public void setTotpId(long totpId) {
		_totpId = totpId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public int getFailedAttempts() {
		return _failedAttempts;
	}

	@Override
	public void setFailedAttempts(int failedAttempts) {
		_failedAttempts = failedAttempts;
	}

	@JSON
	@Override
	public String getSharedSecret() {
		if (_sharedSecret == null) {
			return "";
		}
		else {
			return _sharedSecret;
		}
	}

	@Override
	public void setSharedSecret(String sharedSecret) {
		_sharedSecret = sharedSecret;
	}

	@JSON
	@Override
	public boolean getVerified() {
		return _verified;
	}

	@JSON
	@Override
	public boolean isVerified() {
		return _verified;
	}

	@Override
	public void setVerified(boolean verified) {
		_verified = verified;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TOTP.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TOTP toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TOTP)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TOTPImpl totpImpl = new TOTPImpl();

		totpImpl.setTotpId(getTotpId());
		totpImpl.setUserId(getUserId());
		totpImpl.setFailedAttempts(getFailedAttempts());
		totpImpl.setSharedSecret(getSharedSecret());
		totpImpl.setVerified(isVerified());

		totpImpl.resetOriginalValues();

		return totpImpl;
	}

	@Override
	public int compareTo(TOTP totp) {
		long primaryKey = totp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TOTP)) {
			return false;
		}

		TOTP totp = (TOTP)obj;

		long primaryKey = totp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TOTPModelImpl totpModelImpl = this;

		totpModelImpl._originalUserId = totpModelImpl._userId;

		totpModelImpl._setOriginalUserId = false;

		totpModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TOTP> toCacheModel() {
		TOTPCacheModel totpCacheModel = new TOTPCacheModel();

		totpCacheModel.totpId = getTotpId();

		totpCacheModel.userId = getUserId();

		totpCacheModel.failedAttempts = getFailedAttempts();

		totpCacheModel.sharedSecret = getSharedSecret();

		String sharedSecret = totpCacheModel.sharedSecret;

		if ((sharedSecret != null) && (sharedSecret.length() == 0)) {
			totpCacheModel.sharedSecret = null;
		}

		totpCacheModel.verified = isVerified();

		return totpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{totpId=");
		sb.append(getTotpId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", failedAttempts=");
		sb.append(getFailedAttempts());
		sb.append(", sharedSecret=");
		sb.append(getSharedSecret());
		sb.append(", verified=");
		sb.append(isVerified());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.multi.factor.authentication.otp.model.TOTP");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>totpId</column-name><column-value><![CDATA[");
		sb.append(getTotpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failedAttempts</column-name><column-value><![CDATA[");
		sb.append(getFailedAttempts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedSecret</column-name><column-value><![CDATA[");
		sb.append(getSharedSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verified</column-name><column-value><![CDATA[");
		sb.append(isVerified());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TOTP.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TOTP.class, ModelWrapper.class
		};
	private long _totpId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private int _failedAttempts;
	private String _sharedSecret;
	private boolean _verified;
	private long _columnBitmask;
	private TOTP _escapedModel;
}